package cn.hdu.liu.blockchain.yuan.contract;
import com.thanos.web3j.abi.TypeReference;
import com.thanos.web3j.abi.datatypes.Address;
import com.thanos.web3j.abi.datatypes.Bool;
import com.thanos.web3j.abi.datatypes.DynamicBytes;
import com.thanos.web3j.abi.datatypes.Function;
import com.thanos.web3j.abi.datatypes.Type;
import com.thanos.web3j.abi.datatypes.Utf8String;
import com.thanos.web3j.abi.datatypes.generated.Uint8;
import com.thanos.web3j.channel.client.TransactionSucCallback;
import com.thanos.web3j.crypto.Credentials;
import com.thanos.web3j.model.ThanosTransactionReceipt;
import com.thanos.web3j.protocol.Web3j;
import com.thanos.web3j.tx.Contract;
import com.thanos.web3j.tx.TransactionManager;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Future;


    public final class Yuan extends Contract {
        private static String BINARY = "608060405234801561001057600080fd5b50611e21806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806342ce1488146100885780634e0cb1bb146100f15780637c261929146101d35780637f2eec021461023c578063a87430ba146102a5578063ad88bb2714610315578063f2c298be146103d1575b600080fd5b34801561009457600080fd5b506100ef600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061043a565b005b3480156100fd57600080fd5b50610158600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610645565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019857808201518184015260208101905061017d565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b5061023a600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061100c565b005b34801561024857600080fd5b506102a3600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506110dd565b005b3480156102b157600080fd5b506102e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111ae565b604051808360028111156102f657fe5b60ff168152602001821515151581526020019250505060405180910390f35b34801561032157600080fd5b50610356600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111ec565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039657808201518184015260208101905061037b565b50505050905090810190601f1680156103c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103dd57600080fd5b50610438600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611753565b005b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615156104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4572726f723a20e794a8e688b7e69caae6b3a8e5868c0000000000000000000081525060200191505060405180910390fd5b60008151111515610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4572726f723a20e5afb9e8b1a1e7bc96e7a081e4b88de883bde4b8bae7a9ba0081525060200191505060405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040518082805190602001908083835b6020831015156105ed57805182526020820191506020810190506020830392506105c8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908315150217905550610642600282611af4565b50565b60606000806060600080600060606000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515610719576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4572726f723a20e794a8e688b7e69caae6b3a8e5868c0000000000000000000081525060200191505060405180910390fd5b60008b51111515610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4572726f723a20e8afb7e5a1abe58699e5afb9e8b1a1e7bc96e58fb70000000081525060200191505060405180910390fd5b8a6040516020018082805190602001908083835b6020831015156107cb57805182526020820191506020810190506020830392506107a6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610834578051825260208201915060208101905060208303925061080f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209850600097506001805480602002602001604051908101604052809291908181526020016000905b828210156109c85783829060005260206000209060040201608060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109b05780601f10610985576101008083540402835291602001916109b0565b820191906000526020600020905b81548152906001019060200180831161099357829003601f168201915b50505050508152505081526020019060010190610889565b505050509650600095505b8651861015610c1857886000191687878151811015156109ef57fe5b90602001906020020151606001516040516020018082805190602001908083835b602083101515610a355780518252602082019150602081019050602083039250610a10565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610a9e5780518252602082019150602081019050602083039250610a79565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916148015610bfd575060016002811115610ae457fe5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166002811115610b3e57fe5b1480610bfc5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b6040518082805190602001908083835b602083101515610bba5780518252602082019150602081019050602083039250610b95565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff165b5b15610c0b5787806001019850505b85806001019650506109d3565b600088111515610c90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4572726f723a20e697a0e8aeb0e5bd95e68896e69d83e99990e4b88de8b6b30081525060200191505060405180910390fd5b6000945087606002850194508760200285019450600093505b87841015610cdf578684815181101515610cbf57fe5b906020019060200201516060015151850194508380600101945050610ca9565b846040519080825280601f01601f191660200182016040528015610d125781602001602082028038833980820191505090505b50925060009150600090505b8651811015610ffb5788600019168782815181101515610d3a57fe5b90602001906020020151606001516040516020018082805190602001908083835b602083101515610d805780518252602082019150602081019050602083039250610d5b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610de95780518252602082019150602081019050602083039250610dc4565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916148015610f48575060016002811115610e2f57fe5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166002811115610e8957fe5b1480610f475750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208b6040518082805190602001908083835b602083101515610f055780518252602082019150602081019050602083039250610ee0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff165b5b15610fee57610f7383838984815181101515610f6057fe5b9060200190602002015160000151611bd8565b9150610f9b83838984815181101515610f8857fe5b9060200190602002015160200151611bec565b9150610fc383838984815181101515610fb057fe5b9060200190602002015160400151611bec565b9150610feb83838984815181101515610fd857fe5b9060200190602002015160600151611c00565b91505b8080600101915050610d1e565b829950505050505050505050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615156110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4572726f723a20e794a8e688b7e69caae6b3a8e5868c0000000000000000000081525060200191505060405180910390fd5b6110da600482611af4565b50565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615156111a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4572726f723a20e794a8e688b7e69caae6b3a8e5868c0000000000000000000081525060200191505060405180910390fd5b6111ab600382611af4565b50565b60006020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b606060006060600080600060606000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615156112bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4572726f723a20e794a8e688b7e69caae6b3a8e5868c0000000000000000000081525060200191505060405180910390fd5b600160028111156112cc57fe5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16600281111561132657fe5b148061135d57508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156113d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4572726f723a20e697a0e69d83e999900000000000000000000000000000000081525060200191505060405180910390fd5b600097506001805480602002602001604051908101604052809291908181526020016000905b828210156115365783829060005260206000209060040201608060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561151e5780601f106114f35761010080835404028352916020019161151e565b820191906000526020600020905b81548152906001019060200180831161150157829003601f168201915b505050505081525050815260200190600101906113f7565b505050509650600095505b86518610156115af578973ffffffffffffffffffffffffffffffffffffffff16878781518110151561156f57fe5b906020019060200201516000015173ffffffffffffffffffffffffffffffffffffffff1614156115a25787806001019850505b8580600101965050611541565b6000945087606002850194508760200285019450600093505b878410156115fe5786848151811015156115de57fe5b9060200190602002015160600151518501945083806001019450506115c8565b846040519080825280601f01601f1916602001820160405280156116315781602001602082028038833980820191505090505b50925060009150600090505b8651811015611743578973ffffffffffffffffffffffffffffffffffffffff16878281518110151561166b57fe5b906020019060200201516000015173ffffffffffffffffffffffffffffffffffffffff161415611736576116bb838389848151811015156116a857fe5b9060200190602002015160000151611bd8565b91506116e3838389848151811015156116d057fe5b9060200190602002015160200151611bec565b915061170b838389848151811015156116f857fe5b9060200190602002015160400151611bec565b91506117338383898481518110151561172057fe5b9060200190602002015160600151611c00565b91505b808060010191505061163d565b8298505050505050505050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16151515611819576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4572726f723a20e794a8e688b7e5b7b2e5ad98e59ca80000000000000000000081525060200191505060405180910390fd5b600290506040805190810160405280600681526020017f31323334353600000000000000000000000000000000000000000000000000008152506040516020018082805190602001908083835b60208310151561188b5780518252602082019150602081019050602083039250611866565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156118f457805182526020820191506020810190506020830392506118cf565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040516020018082805190602001908083835b60208310151561195e5780518252602082019150602081019050602083039250611939565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156119c757805182526020820191506020810190506020830392506119a2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415611a0357600190505b6040805190810160405280826002811115611a1a57fe5b8152602001600115158152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690836002811115611a8857fe5b021790555060208201518160000160016101000a81548160ff021916908315150217905550905050611af060016040805190810160405280600481526020017f4e554c4c00000000000000000000000000000000000000000000000000000000815250611af4565b5050565b60016080604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001428152602001848152602001838152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003019080519060200190611bd0929190611d50565b505050505050565b600081838501526020830190509392505050565b600081838501526020830190509392505050565b600060606000836040516020018080602001828103825283818151815260200191508051906020019080838360005b83811015611c4a578082015181840152602081019050611c2f565b50505050905090810190601f168015611c775780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040529150600090505b8151811015611d41578181815181101515611ca957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000286828701815181101515611d0457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611c92565b81518501925050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611d9157805160ff1916838001178555611dbf565b82800160010185558215611dbf579182015b82811115611dbe578251825591602001919060010190611da3565b5b509050611dcc9190611dd0565b5090565b611df291905b80821115611dee576000816000905550600101611dd6565b5090565b905600a165627a7a723058204391148f0552141bd9255aeb7f9bb28491bb2234a1c2828c2ab27d1b21f6df460029";

        public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"objectCode\",\"type\":\"string\"}],\"name\":\"upload\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"objectCode\",\"type\":\"string\"}],\"name\":\"getRecordsByObjectCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"objectCode\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"objectCode\",\"type\":\"string\"}],\"name\":\"modify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"getRecordsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";

        private Yuan(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
            super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, isInitByName);
        }

        private Yuan(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Boolean isInitByName) {
            super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, isInitByName);
        }

        private Yuan(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
            super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit, false);
        }

        private Yuan(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
            super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
        }

        public Future<ThanosTransactionReceipt> upload(Utf8String objectCode, Set executeStates) {
            Function function = new Function("upload", Arrays.<Type>asList(objectCode), Collections.<TypeReference<?>>emptyList());
            return executeTransactionAsync(function, executeStates);
        }

        public void upload(Utf8String objectCode, TransactionSucCallback callback) {
            Function function = new Function("upload", Arrays.<Type>asList(objectCode), Collections.<TypeReference<?>>emptyList());
            executeTransactionAsync(function, callback);
        }

        public Future<DynamicBytes> getRecordsByObjectCode(Utf8String objectCode, Set executeStates) {
            Function function = new Function("getRecordsByObjectCode",
                    Arrays.<Type>asList(objectCode),
                    Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
            return executeCallSingleValueReturnAsync(function);
        }

        public Future<ThanosTransactionReceipt> query(Utf8String objectCode, Set executeStates) {
            Function function = new Function("query", Arrays.<Type>asList(objectCode), Collections.<TypeReference<?>>emptyList());
            return executeTransactionAsync(function, executeStates);
        }

        public void query(Utf8String objectCode, TransactionSucCallback callback) {
            Function function = new Function("query", Arrays.<Type>asList(objectCode), Collections.<TypeReference<?>>emptyList());
            executeTransactionAsync(function, callback);
        }

        public Future<ThanosTransactionReceipt> modify(Utf8String objectCode, Set executeStates) {
            Function function = new Function("modify", Arrays.<Type>asList(objectCode), Collections.<TypeReference<?>>emptyList());
            return executeTransactionAsync(function, executeStates);
        }

        public void modify(Utf8String objectCode, TransactionSucCallback callback) {
            Function function = new Function("modify", Arrays.<Type>asList(objectCode), Collections.<TypeReference<?>>emptyList());
            executeTransactionAsync(function, callback);
        }

        public Future<List<Type>> users(Address param0, Set executeStates) {
            Function function = new Function("users",
                    Arrays.<Type>asList(param0),
                    Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Bool>() {}));
            return executeCallMultipleValueReturnAsync(function);
        }

        public Future<DynamicBytes> getRecordsByAddress(Address targetAddress, Set executeStates) {
            Function function = new Function("getRecordsByAddress",
                    Arrays.<Type>asList(targetAddress),
                    Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
            return executeCallSingleValueReturnAsync(function);
        }

        public Future<ThanosTransactionReceipt> register(Utf8String password, Set executeStates) {
            Function function = new Function("register", Arrays.<Type>asList(password), Collections.<TypeReference<?>>emptyList());
            return executeTransactionAsync(function, executeStates);
        }

    public void register(Utf8String password, TransactionSucCallback callback) {
        Function function = new Function("register", Arrays.<Type>asList(password), Collections.<TypeReference<?>>emptyList());
        executeTransactionAsync(function, callback);
    }

    public static Future<Yuan> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Yuan.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<Yuan> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(Yuan.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Yuan load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Yuan(contractAddress, web3j, credentials, gasPrice, gasLimit, false);
    }

    public static Yuan load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Yuan(contractAddress, web3j, transactionManager, gasPrice, gasLimit, false);
    }

    public static Yuan loadByName(String contractName, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Yuan(contractName, web3j, credentials, gasPrice, gasLimit, true);
    }

    public static Yuan loadByName(String contractName, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Yuan(contractName, web3j, transactionManager, gasPrice, gasLimit, true);
    }
}
